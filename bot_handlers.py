from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
from aiogram.enums import ParseMode
from settings import settings
from db import SessionLocal, get_or_create_user, has_premium, increment_free, log_analysis
from analysis import analyze_text
from letters import make_letter
from speech import stt_audio_url_to_text
from share_image import make_share_card
import httpx

bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

BUY_KB = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="üí≥ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å Premium", callback_data="buy")]]
)

POST_PREMIUM_KB = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º", callback_data="share")],
    [InlineKeyboardButton(text="üíå –ü–∏—Å—å–º–æ –æ—Ç –º–æ–µ–≥–æ –∏–º–µ–Ω–∏", callback_data="letter")]
])

@dp.message(F.text.startswith("/start"))
async def start(message: Message):
    ref = None
    parts = message.text.split()
    if len(parts) > 1 and parts[1] != message.from_user.id:
        ref = parts[1]
    async with SessionLocal() as session:
        await get_or_create_user(session, str(message.from_user.id), referrer_tg_id=ref)
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî <b>{settings.BRAND_NAME}</b>.\n"
        "–û—Ç–ø—Ä–∞–≤—å <b>–≥–æ–ª–æ—Å</b> –∏–ª–∏ <b>—Ç–µ–∫—Å—Ç</b> ‚Äî —è —Å–∫–∞–∂—É, –∫—Ç–æ —Ç—ã –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ.\n\n"
        f"üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: {settings.FREE_TRIAL_ANALYSES} –∞–Ω–∞–ª–∏–∑. –î–∞–ª—å—à–µ ‚Äî Premium (4.99‚Ç¨/–Ω–µ–¥–µ–ª—è).",
        parse_mode=ParseMode.HTML
    )

@dp.callback_query(F.data == "buy")
async def buy(cb: CallbackQuery):
    async with httpx.AsyncClient() as client:
        resp = await client.post(f"{settings.BASE_URL}/stripe/create-checkout-session", json={"tg_id": str(cb.from_user.id)})
        url = resp.json().get("url")
    await cb.message.answer(f"–û–ø–ª–∞—Ç–∞: {url}")
    await cb.answer()

@dp.message(F.voice)
async def handle_voice(message: Message):
    file = await bot.get_file(message.voice.file_id)
    file_url = f"https://api.telegram.org/file/bot{settings.TELEGRAM_BOT_TOKEN}/{file.file_path}"
    text = await stt_audio_url_to_text(file_url)
    await process_analysis(message, text, input_type="voice")

@dp.message(F.text)
async def handle_text(message: Message):
    await process_analysis(message, message.text, input_type="text")

async def process_analysis(message: Message, input_text: str, input_type: str):
    tg_id = str(message.from_user.id)
    async with SessionLocal() as session:
        user = await get_or_create_user(session, tg_id)
        premium = await has_premium(session, user.id)
        if not premium:
            res = await session.get(type(user), user.id)
            used = res.free_used
            if used >= settings.FREE_TRIAL_ANALYSES:
                await message.reply("–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –†–∞–∑–±–ª–æ–∫–∏—Ä—É–π Premium, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=BUY_KB)
                return

        await message.reply("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é‚Ä¶ 5‚Äì10 —Å–µ–∫‚Ä¶")
        try:
            out, t_in, t_out, hook = await analyze_text(input_text, premium=premium)
            await message.answer(out, parse_mode=ParseMode.HTML)
            if not premium:
                await increment_free(session, user.id)
            await log_analysis(session, user.id, input_type, t_in, t_out)
            if premium:
                await message.answer("–ì–æ—Ç–æ–≤–æ. –•–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ –æ—Ç —Ç–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏?", reply_markup=POST_PREMIUM_KB)
            else:
                await message.answer("–•–æ—á–µ—à—å –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç + —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏ –∫–∞—Ä—Ç—É –¥–ª—è —Å—Ç–æ—Ä–∏—Å?", reply_markup=BUY_KB)
            bot.__dict__.setdefault("hooks", {})[tg_id] = hook
        except Exception:
            await message.answer("–£–ø—Å, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

@dp.callback_query(F.data == "share")
async def share(cb: CallbackQuery):
    tg_id = str(cb.from_user.id)
    hook = bot.__dict__.get("hooks", {}).get(tg_id, "–≠—Ç–æ –∑–∞—Ü–µ–ø–∏–ª–æ –º–µ–Ω—è. –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –æ–Ω —Å–∫–∞–∂–µ—Ç –ø—Ä–æ —Ç–µ–±—è.")
    card = make_share_card(hook, watermark=settings.SHARE_WATERMARK)
    await cb.message.answer_photo(BufferedInputFile(card, filename="share.png"),
        caption=f"–ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è: @{(await bot.get_me()).username}")
    await cb.answer()

@dp.callback_query(F.data == "letter")
async def letter(cb: CallbackQuery):
    tg_id = str(cb.from_user.id)
    async with SessionLocal() as session:
        user = await get_or_create_user(session, tg_id)
        from db import has_premium
        if not await has_premium(session, user.id):
            await cb.message.answer("–û–ø—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ Premium.", reply_markup=BUY_KB)
            await cb.answer()
            return
    await cb.message.answer("üíå –û —á—ë–º –Ω–∞–ø–∏—Å–∞—Ç—å? –ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π.")
    bot.__dict__.setdefault("await_letter_ctx", set()).add(tg_id)
    await cb.answer()

@dp.message()
async def letter_context(message: Message):
    tg_id = str(message.from_user.id)
    waiting = bot.__dict__.setdefault("await_letter_ctx", set())
    if tg_id not in waiting:
        return
    waiting.remove(tg_id)
    await message.reply("–ü–∏—à—É –ø–∏—Å—å–º–æ‚Ä¶ 5‚Äì10 —Å–µ–∫‚Ä¶")
    txt = await make_letter(message.text)
    await message.answer(txt)
